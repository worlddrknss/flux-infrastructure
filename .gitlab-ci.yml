# -----------------------------
stages:
  - test
  - secret-detection
  - validate
  - plan
  - apply
  - maintenance

variables:
  TF_ROOT: "scripts/terraform"
  TF_STATE_KEY: "env/${CI_PROJECT_NAME}/${CI_COMMIT_REF_SLUG}/${CI_PROJECT_NAME}.tfstate"

sast:
  stage: test

secret_detection:
  stage: secret-detection

# -----------------------------
# Terraform Jobs
# -----------------------------
validate:
  extends: .terraform-job
  stage: validate
  script:
    - terraform fmt -recursive
    - terraform validate
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - scripts/terraform/**/*

plan:
  extends: .terraform-job
  stage: plan
  script:
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - scripts/terraform/tfplan
    expire_in: 1h
  needs: ["validate"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - scripts/terraform/**/*

apply:
  extends: .terraform-job
  stage: apply
  script:
    - terraform apply -auto-approve tfplan
    - terraform output -raw cluster_name > cluster_name
  artifacts:
    paths:
      - scripts/terraform/cluster_name
  dependencies:
    - plan
  needs: ["plan"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      changes:
        - scripts/terraform/**/*

destroy-trigger:
  stage: maintenance
  trigger:
    include: .gitlab/workflows/.gitlab-ci.destroy.yml
  rules:
    - when: manual
  allow_failure: true

flux-bootstrap-trigger:
  stage: maintenance
  trigger:
    include: .gitlab/workflows/.gitlab-ci.flux.yml
  rules:
    - when: manual
  allow_failure: true

# -----------------------------
# GitLab Security Templates
# -----------------------------
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/SAST-IaC.latest.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - local: .gitlab/workflows/.gitlab-ci.templates.yml