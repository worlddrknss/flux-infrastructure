# -----------------------------
stages:
  - test
  - secret-detection
  - validate
  - plan
  - apply
  - maintenance

variables:
  TF_ROOT: "scripts/terraform"
  TF_STATE_KEY: "env/${CI_PROJECT_NAME}/${CI_COMMIT_REF_SLUG}/${CI_PROJECT_NAME}.tfstate"

sast:
  stage: test

secret_detection:
  stage: secret-detection

# -----------------------------
# Terraform Job Template
# -----------------------------
.terraform-job:
  image:
    name: hashicorp/terraform:1.13.0
    entrypoint: ["/usr/bin/env", "sh", "-c"]
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com   # must match IAM trust policy
  before_script:
    # Install AWS CLI
    - apk add --no-cache aws-cli
    # Assume AWS IAM role using GitLab OIDC
    - >
      aws_sts_output=$(aws sts assume-role-with-web-identity \
        --role-arn "$AWS_ROLE_ARN" \
        --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}" \
        --web-identity-token "$GITLAB_OIDC_TOKEN" \
        --duration-seconds 3600 \
        --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
        --output text)
    - export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $aws_sts_output)
    - aws sts get-caller-identity
    - cd "$TF_ROOT"
    - |
      terraform init \
        -backend-config="bucket=$TF_STATE_BUCKET" \
        -backend-config="key=$TF_STATE_KEY" \
        -backend-config="region=$TF_STATE_REGION"

# -----------------------------
# Terraform Jobs
# -----------------------------
validate:
  extends: .terraform-job
  stage: validate
  script:
    - terraform fmt -recursive
    - terraform validate
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - scripts/terraform/**/*

plan:
  extends: .terraform-job
  stage: plan
  script:
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - scripts/terraform/tfplan
    expire_in: 1h
  needs: ["validate"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - scripts/terraform/**/*

apply:
  extends: .terraform-job
  stage: apply
  script:
    - terraform apply -auto-approve tfplan
    - terraform output -raw cluster_name > cluster_name
  artifacts:
    paths:
      - cluster_name
  dependencies:
    - plan
  needs: ["plan"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      changes:
        - scripts/terraform/**/*

destroy-trigger:
  stage: maintenance
  trigger:
    include: .gitlab/workflows/.gitlab-ci.destroy.yml
  rules:
    - when: manual
  allow_failure: true

flux-bootstrap-trigger:
  stage: maintenance
  trigger:
    include: .gitlab/workflows/.gitlab-ci.flux.yml
  rules:
    - when: manual
  allow_failure: true

# -----------------------------
# GitLab Security Templates
# -----------------------------
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/SAST-IaC.latest.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
